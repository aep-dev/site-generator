---
import { Icon } from '@astrojs/starlight/components'
import editionsConfig from '../../aep-editions.json'
import { getEditionFromPath, getVersionedPath, isVersionedPage } from '../utils/versions'

const currentEdition = getEditionFromPath(editionsConfig, Astro.url.pathname)
const showVersionSelect = isVersionedPage(Astro.url.pathname)
---

{showVersionSelect && (
  <aep-version-select>
    <label>
      <span class="sr-only">Select version</span>
      <Icon name="seti:clock" class="icon label-icon" />
      <select value={currentEdition?.name ?? 'latest'} autocomplete="off">
        {editionsConfig.editions.map((edition) => (
          <option
            selected={edition.name === currentEdition?.name}
            value={getVersionedPath(editionsConfig, Astro.url.pathname, edition)}
          >
            {edition.name}
          </option>
        ))}
      </select>
      <Icon name="down-caret" class="icon caret-icon" />
    </label>
  </aep-version-select>
)}

<style>
  label {
    --sl-versions-label-icon-size: 0.875rem;
    --sl-versions-caret-icon-size: 1.25rem;

    align-items: center;
    color: var(--sl-color-gray-1);
    display: flex;
    gap: 0.25rem;
    position: relative;
  }

  label:hover {
    color: var(--sl-color-gray-2);
  }

  .icon {
    pointer-events: none;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  }

  .label-icon {
    font-size: var(--sl-versions-label-icon-size);
    inset-inline-start: 0;
  }

  .caret-icon {
    font-size: var(--sl-versions-caret-icon-size);
    inset-inline-end: 0;
  }

  select {
    appearance: none;
    background-color: transparent;
    border: 0;
    color: inherit;
    cursor: pointer;
    padding-block: 0.625rem;
    padding-inline: calc(var(--sl-versions-label-icon-size) + 0.375rem)
      calc(var(--sl-versions-caret-icon-size) + 0.25rem);
    text-overflow: ellipsis;
    width: 8em;
  }

  option {
    background-color: var(--sl-color-bg-nav);
    color: var(--sl-color-gray-1);
  }

  @media (min-width: 50rem) {
    select {
      font-size: var(--sl-text-sm);
    }
  }
</style>

<script>
  customElements.define(
    'aep-version-select',
    class AepVersionSelect extends HTMLElement {
      constructor() {
        super()

        const select = this.querySelector('select')
        if (!select) return

        select?.addEventListener('change', (event) => {
          if (event.currentTarget instanceof HTMLSelectElement) {
            globalThis.location.pathname = event.currentTarget.value
          }
        })

        window.addEventListener('pageshow', (event) => {
          if (!event.persisted) return
          const markupSelectedIndex = select.querySelector<HTMLOptionElement>('option[selected]')?.index

          if (markupSelectedIndex !== select.selectedIndex) {
            select.selectedIndex = markupSelectedIndex ?? 0
          }
        })
      }
    },
  )
</script>